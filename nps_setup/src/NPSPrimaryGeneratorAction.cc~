//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: AmagnetPrimaryGeneratorAction.cc $
//
/// \file AmagnetPrimaryGeneratorAction.cc
/// \brief Implementation of the AmagnetPrimaryGeneratorAction class

// GN 2015
#include "AmagnetPrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

AmagnetPrimaryGeneratorAction::AmagnetPrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(),
  fParticleGun(0), fX0(0), fY0(0), fZ0(0), fBeamRadius(0)
  //,  fEnvelopeBox(0)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle    = particleTable->FindParticle(particleName="e-");
  //
  // Read gun energy and position from a file
  // 
  ifstream file("beam_definition.txt"); // Open the file for reading.
  // Read electron beam position
  file >> fBeamEnergy >> fBeamRadius >> fX0 >> fY0 >> fZ0;
  fBeamRadius=fBeamRadius;
  fBeamEnergy=fBeamEnergy*MeV;
  fParticleGun->SetParticleDefinition(particle);
  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0.,0.,1.));
  fParticleGun->SetParticleEnergy(fBeamEnergy);
  //
  // Keep human informed
  //
  G4cout<< "----> Beam of "<<fBeamEnergy<<" MeV and radius "<<fBeamRadius<<" starting at "<<fX0<<" "<<fY0<<" "<<fZ0<<" <----"<<G4endl;
  //close the file
  file.close();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

AmagnetPrimaryGeneratorAction::~AmagnetPrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void AmagnetPrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  //this function is called at the begining of each event
  //
  // We want to place the particle gun just before the Radiator
   G4double x=100,y=100,z;
   /// G4double crt_r,crt_ctt,crt_stt,crt_angle;
  /*
  crt_r=fBeamRadius*G4UniformRand();
  crt_angle=2.*G4UniformRand()*3.14159;
  crt_stt=sin(crt_angle);
  crt_ctt=cos(crt_angle);
  x=(fX0+crt_r*crt_stt)*cm;
  y=(fY0+crt_r*crt_ctt)*cm;
  */
  do {
    x=2.*fBeamRadius*(G4UniformRand()-.5);
    y=2.*fBeamRadius*(G4UniformRand()-.5);
    ///   G4cout << x << " "<<y<<" "<<sqrt(x*x+y*y)<<" "<<fBeamRadius<<G4endl;
  } while (sqrt(x*x+y*y)> fBeamRadius);
  x=(fX0+x)*cm;
  y=(fY0+y)*cm;
  z=fZ0*cm;
  fParticleGun->SetParticlePosition(G4ThreeVector(x,y,z));
  fParticleGun->GeneratePrimaryVertex(anEvent);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

